datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = ["public", "quizzy", "fallenfuture"]
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

model User {
    id                   BigInt               @id @default(autoincrement())
    uid                  String               @unique @db.Uuid
    email                String               @unique
    firstname            String
    lastname             String
    phonenumber          String               @unique
    score                Int                  @default(0)
    userRole             UserRole[]
    Task                 Task[]
    UserTask             UserTask[]
    IssuerScoreHistory   ScoreHistory[]       @relation("issuer_SH")
    ReceiverScoreHistory ScoreHistory[]       @relation("receiver_SH")
    OpportunityRequest   OpportunityRequest[]
    UserNotification     UserNotification[]
    UserQuiz             UserQuiz[]

    @@unique([firstname, lastname])
    @@schema("public")
}

model Role {
    id          BigInt     @id @default(autoincrement())
    name        String     @unique
    permissions String[]
    userRole    UserRole[]

    @@schema("public")
}

model UserRole {
    id     BigInt @id @default(autoincrement())
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId BigInt
    role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId BigInt

    @@unique([userId, roleId])
    @@schema("public")
}

model Task {
    id              BigInt            @id @default(autoincrement())
    title           String
    description     String
    points          Int               @default(0)
    dueDate         DateTime
    createdAt       DateTime
    allowUpload     Boolean           @default(false)
    issuer          User              @relation(fields: [issuerId], references: [id])
    issuerId        BigInt
    UserTask        UserTask[]
    OpportunityTask OpportunityTask[]
    TaskTag         TaskTag[]
    dupped          Boolean           @default(false)

    @@schema("public")
}

model Tag {
    id      BigInt    @id @default(autoincrement())
    name    String    @unique
    color   String
    TaskTag TaskTag[]

    @@schema("public")
}

model TaskTag {
    id     BigInt @id @default(autoincrement())
    task   Task   @relation(fields: [taskId], references: [id])
    taskId BigInt
    tag    Tag    @relation(fields: [tagId], references: [id])
    tagId  BigInt

    @@schema("public")
}

model UserTask {
    id                 BigInt               @id @default(autoincrement())
    finished           Boolean              @default(false)
    approved           Boolean              @default(false)
    user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             BigInt
    task               Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId             BigInt
    UserTaskUploadFile UserTaskUploadFile[]

    @@unique([userId, taskId])
    @@schema("public")
}

model UploadFile {
    id                 BigInt               @id @default(autoincrement())
    type               String
    download           String
    fileName           String
    UserTaskUploadFile UserTaskUploadFile[]

    @@schema("public")
}

model UserTaskUploadFile {
    id           BigInt     @id @default(autoincrement())
    uploadFile   UploadFile @relation(fields: [uploadFileId], references: [id])
    uploadFileId BigInt
    userTask     UserTask   @relation(fields: [userTaskId], references: [id])
    userTaskId   BigInt

    @@schema("public")
}

model Opportunity {
    id                 BigInt               @id @default(autoincrement())
    title              String
    description        String
    deadline           String
    OpportunityTask    OpportunityTask[]
    OpportunityRequest OpportunityRequest[]

    @@schema("public")
}

model OpportunityRequest {
    id            BigInt      @id @default(autoincrement())
    opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
    opportunityId BigInt
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        BigInt
    approved      Boolean     @default(false)

    @@schema("public")
}

model OpportunityTask {
    id            BigInt      @id @default(autoincrement())
    task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId        BigInt
    opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
    opportunityId BigInt

    @@schema("public")
}

model ScoreHistory {
    id         BigInt   @id @default(autoincrement())
    issuer     User?    @relation("issuer_SH", fields: [issuerId], references: [id], onDelete: SetNull)
    receiver   User?    @relation("receiver_SH", fields: [receiverId], references: [id], onDelete: Cascade)
    date       DateTime
    reason     String?
    ammount    Int
    issuerId   BigInt?
    receiverId BigInt

    @@schema("public")
}

model KaggleCompetitionLeaderboard {
    id                Int     @id @default(autoincrement())
    name              String
    competitionId     String  @unique
    user              String
    token             String
    reward            Int     @default(3)
    rewardDescription String  @default("Reward Tooltip")
    completed         Boolean @default(false)

    @@schema("public")
}

model KaggleCompetitionRecord {
    id            Int    @id @default(autoincrement())
    competitionId String @unique
    record        Json

    @@schema("public")
}

model Notification {
    id               BigInt             @id @default(autoincrement())
    title            String
    description      String
    UserNotification UserNotification[]

    @@schema("public")
}

model UserNotification {
    id             BigInt       @id @default(autoincrement())
    user           User         @relation(fields: [userId], references: [id])
    userId         BigInt
    notification   Notification @relation(fields: [notificationId], references: [id])
    notificationId BigInt

    @@schema("public")
}

model Quiz {
    id            BigInt          @id @default(autoincrement())
    quizName      String
    QuizQuestions QuizQuestions[]
    QuizSchedule  QuizSchedule[]
    UserQuiz      UserQuiz[]

    @@schema("quizzy")
}

model QuizSchedule {
    id        BigInt     @id @default(autoincrement())
    name      String     @default("Untitled")
    startDate DateTime
    code      String
    duration  Int
    UserQuiz  UserQuiz[]
    Quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
    quizId    BigInt

    @@schema("quizzy")
}

model QuizQuestions {
    id         BigInt   @id @default(autoincrement())
    quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    quizId     BigInt
    questionId BigInt

    @@schema("quizzy")
}

model UserQuiz {
    id             BigInt       @id @default(autoincrement())
    quizSchedule   QuizSchedule @relation(fields: [quizScheduleId], references: [id], onDelete: Cascade)
    quiz           Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    answers        Json
    attended       Boolean
    attendedAt     DateTime?
    submitted      Boolean      @default(false)
    quizId         BigInt
    userId         BigInt
    autoGrade      Int
    manualGrade    Int
    quizScheduleId BigInt

    @@unique([quizScheduleId, userId])
    @@schema("quizzy")
}

model QuestionsCollection {
    id                           BigInt                         @id @default(autoincrement())
    collectionName               String
    QuestionsCollectionQuestions QuestionsCollectionQuestions[]

    @@schema("quizzy")
}

model QuestionsCollectionQuestions {
    id                    BigInt              @id @default(autoincrement())
    questionsCollection   QuestionsCollection @relation(fields: [questionsCollectionId], references: [id], onDelete: Cascade)
    question              Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionsCollectionId BigInt
    questionId            BigInt

    @@schema("quizzy")
}

model Question {
    id                           BigInt                         @id @default(autoincrement())
    questionObject               Json
    QuestionsCollectionQuestions QuestionsCollectionQuestions[]
    QuizQuestions                QuizQuestions[]

    @@schema("quizzy")
}

enum QuestionTypes {
    MSQ
    TF
    CODE

    @@schema("quizzy")
}

model FallenFutureAccount {
    id         String            @id @db.Uuid
    username   String
    ranks      FallenFutureRanks @default(NOVICE_STRATEGIST)
    score      Int
    PlayerCard PlayerCard[]

    @@schema("fallenfuture")
}

model PlayerCard {
    id                    BigInt              @id @default(autoincrement())
    account               FallenFutureAccount @relation(fields: [fallenFutureAccountId], references: [id])
    //this will be used to refrence card design and skills from our localcards.
    //string
    inheritanceId         String
    hp                    Float
    armor                 Float
    shield                Float
    attackPower           Float
    attackRange           Float
    movement              Float
    power                 Float
    //note to saif remove later
    rarity                Rarity
    fallenFutureAccountId String              @db.Uuid

    @@schema("fallenfuture")
}

enum FallenFutureRanks {
    NOVICE_STRATEGIST
    TACTICAL_ADEPT
    WAR_STRATEGIST
    BATTLE_COMMANDER
    WARLORD
    WAR_ARCHON
    SUPREME_GENERAL

    @@schema("fallenfuture")
}

enum TroopType {
    AIRFORCE
    TANKS
    JUGGERNAUTS
    TROOPERS
    MEDICS
    ASSASSINS

    @@schema("fallenfuture")
}

enum Faction {
    AZURE_VANGUARD
    CRIMSON_SKIES
    ASTRAL_NEXUS

    @@schema("fallenfuture")
}

enum Rarity {
    COMMON
    UNCOMMON
    RARE
    EPIC
    LEGENDARY
    MYTHICAL

    @@schema("fallenfuture")
}
